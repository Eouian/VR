<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\F1C100S.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\F1C100S.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Dec 14 12:02:24 2023
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; f1c100s_tvd_Init &rArr; Defe_Config &rArr; Defe_Config_video_uvcombined_yuv422_to_argb_x &rArr; DE_SCAL_Set_Scaling_Coef &rArr; __aeabi_idivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[10]">Reset_Go</a>
 <LI><a href="#[8c]">sysSetupCP15</a>
 <LI><a href="#[29]">sys_flush_and_clean_dcache</a>
 <LI><a href="#[4]">Vector_Table</a>
 <LI><a href="#[7]">Undefined_Handler</a>
 <LI><a href="#[8]">SWI_Handler</a>
 <LI><a href="#[9]">Prefetch_Handler</a>
 <LI><a href="#[a]">Abort_Handler</a>
 <LI><a href="#[b]">IRQ_Handler</a>
 <LI><a href="#[c]">FIQ_Handler</a>
 <LI><a href="#[e]">__switch$$</a>
 <LI><a href="#[d]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[7]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">Undefined_Handler</a><BR>
 <LI><a href="#[2a]">SWI_Handler2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">SWI_Handler2</a><BR>
 <LI><a href="#[9]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">Prefetch_Handler</a><BR>
 <LI><a href="#[a]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Abort_Handler</a><BR>
 <LI><a href="#[c]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">FIQ_Handler</a><BR>
 <LI><a href="#[1f]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">Abort_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[3]">F1C100S_Interrupt_Shell</a> from sys_interrupt.o(i.F1C100S_Interrupt_Shell) referenced 160 times from sys_interrupt.o(.data)
 <LI><a href="#[c]">FIQ_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[b]">IRQ_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[9]">Prefetch_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[10]">Reset_Go</a> from sys_start.o(F1C100S_INIT) referenced from vectors.o(Vect)
 <LI><a href="#[8]">SWI_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[f]">TIMER1_ISR</a> from sys_timer.o(i.TIMER1_ISR) referenced from main.o(i.main)
 <LI><a href="#[7]">Undefined_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[4]">Vector_Table</a> from vectors.o(Vect) referenced from sys_start.o(F1C100S_INIT)
 <LI><a href="#[d]">__switch$$</a> from sys_tvd.o(i.BSP_TVD_config) referenced 6 times from sys_tvd.o(i.BSP_TVD_config)
 <LI><a href="#[e]">__switch$$</a> from sys_interrupt.o(i.IRQ_Init) referenced 8 times from sys_interrupt.o(i.IRQ_Init)
 <LI><a href="#[5]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[10]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_start.o(F1C100S_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>

<P><STRONG><a name="[11]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[12]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[65]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[66]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[67]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[15]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[68]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[19]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[69]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[70]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[71]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[72]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[73]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[74]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[75]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[76]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[78]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[79]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[7e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[80]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[13]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[85]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[16]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[18]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[86]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1a]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[87]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[21]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[1c]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[88]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1e]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_llsl</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Dev_Clock
</UL>

<P><STRONG><a name="[89]"></a>_ll_shift_l</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_idivmod</STRONG> (ARM, 552 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Factor
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Coef_for_video
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Coef
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Init_Phase
</UL>

<P><STRONG><a name="[1b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_udiv), UNUSED)

<P><STRONG><a name="[22]"></a>__aeabi_uidivmod</STRONG> (ARM, 48 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div12
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div16
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large_positive
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clock_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Coef_for_video
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Coef
</UL>

<P><STRONG><a name="[8c]"></a>sysSetupCP15</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_ctl.o(SYS_INIT), UNUSED)

<P><STRONG><a name="[29]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_ctl.o(SYS_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>

<P><STRONG><a name="[4]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_start.o(F1C100S_INIT)
</UL>
<P><STRONG><a name="[53]"></a>AVS_Time_Init</STRONG> (ARM, 100 bytes, Stack size 0 bytes, sys_timer.o(i.AVS_Time_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[56]"></a>AVS_Time_Init_x</STRONG> (ARM, 92 bytes, Stack size 0 bytes, sys_timer.o(i.AVS_Time_Init_x))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[55]"></a>AVS_Time_Read</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sys_timer.o(i.AVS_Time_Read))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[54]"></a>AVS_Time_Start</STRONG> (ARM, 72 bytes, Stack size 0 bytes, sys_timer.o(i.AVS_Time_Start))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[2c]"></a>BSP_TVD_config</STRONG> (ARM, 1476 bytes, Stack size 40 bytes, sys_tvd.o(i.BSP_TVD_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = BSP_TVD_config &rArr; sysprintf &rArr; FormatItem &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_init
</UL>

<P><STRONG><a name="[37]"></a>DE_SCAL_Config_Src</STRONG> (ARM, 2012 bytes, Stack size 76 bytes, sys_defe.o(i.DE_SCAL_Config_Src))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DE_SCAL_Config_Src
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>

<P><STRONG><a name="[38]"></a>DE_SCAL_Set_CSC_Coef</STRONG> (ARM, 260 bytes, Stack size 40 bytes, sys_defe.o(i.DE_SCAL_Set_CSC_Coef))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DE_SCAL_Set_CSC_Coef
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>

<P><STRONG><a name="[2f]"></a>DE_SCAL_Set_Init_Phase</STRONG> (ARM, 964 bytes, Stack size 40 bytes, sys_defe.o(i.DE_SCAL_Set_Init_Phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DE_SCAL_Set_Init_Phase &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>

<P><STRONG><a name="[39]"></a>DE_SCAL_Set_Out_Size</STRONG> (ARM, 276 bytes, Stack size 20 bytes, sys_defe.o(i.DE_SCAL_Set_Out_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DE_SCAL_Set_Out_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>

<P><STRONG><a name="[31]"></a>DE_SCAL_Set_Scaling_Coef</STRONG> (ARM, 1000 bytes, Stack size 72 bytes, sys_defe.o(i.DE_SCAL_Set_Scaling_Coef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DE_SCAL_Set_Scaling_Coef &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>

<P><STRONG><a name="[32]"></a>DE_SCAL_Set_Scaling_Coef_for_video</STRONG> (ARM, 1088 bytes, Stack size 64 bytes, sys_defe.o(i.DE_SCAL_Set_Scaling_Coef_for_video))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DE_SCAL_Set_Scaling_Coef_for_video &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>

<P><STRONG><a name="[33]"></a>DE_SCAL_Set_Scaling_Factor</STRONG> (ARM, 356 bytes, Stack size 40 bytes, sys_defe.o(i.DE_SCAL_Set_Scaling_Factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DE_SCAL_Set_Scaling_Factor &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>

<P><STRONG><a name="[34]"></a>Debe_Init</STRONG> (ARM, 376 bytes, Stack size 16 bytes, sys_lcd.o(i.Debe_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Debe_Init &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1C100S_LCD_Config
</UL>

<P><STRONG><a name="[35]"></a>Defe_Config</STRONG> (ARM, 108 bytes, Stack size 16 bytes, sys_defe.o(i.Defe_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Defe_Config &rArr; Defe_Config_video_uvcombined_yuv422_to_argb_x &rArr; DE_SCAL_Set_Scaling_Coef &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config_video_uvcombined_yuv422_to_argb_x
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_Init
</UL>

<P><STRONG><a name="[36]"></a>Defe_Config_video_uvcombined_yuv422_to_argb_x</STRONG> (ARM, 432 bytes, Stack size 120 bytes, sys_defe.o(i.Defe_Config_video_uvcombined_yuv422_to_argb_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Defe_Config_video_uvcombined_yuv422_to_argb_x &rArr; DE_SCAL_Set_Scaling_Coef &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Factor
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Coef_for_video
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Scaling_Coef
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Out_Size
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_Init_Phase
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Set_CSC_Coef
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_SCAL_Config_Src
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config
</UL>

<P><STRONG><a name="[3a]"></a>Defe_Init</STRONG> (ARM, 120 bytes, Stack size 8 bytes, sys_defe.o(i.Defe_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Defe_Init &rArr; Open_Dev_Clock &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Dev_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_Init
</UL>

<P><STRONG><a name="[5a]"></a>Defe_Start</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys_defe.o(i.Defe_Start))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_Init
</UL>

<P><STRONG><a name="[5e]"></a>Enable_Layer_Video</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sys_lcd.o(i.Enable_Layer_Video))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>F1C100S_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_interrupt.o(i.F1C100S_Interrupt_Shell))
<BR>[Address Reference Count : 1]<UL><LI> sys_interrupt.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>F1C100S_LCD_Config</STRONG> (ARM, 184 bytes, Stack size 16 bytes, sys_lcd.o(i.F1C100S_LCD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = F1C100S_LCD_Config &rArr; Tcon_Init &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcon_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debe_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LCD_Init
</UL>

<P><STRONG><a name="[42]"></a>GPIO_Config</STRONG> (ARM, 144 bytes, Stack size 12 bytes, sys_gpio.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[2b]"></a>IRQ_Handler2</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_interrupt.o(i.IRQ_Handler2))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[49]"></a>IRQ_Init</STRONG> (ARM, 180 bytes, Stack size 12 bytes, sys_interrupt.o(i.IRQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IRQ_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TimerX_Init
</UL>

<P><STRONG><a name="[41]"></a>LCD_IO_Init</STRONG> (ARM, 556 bytes, Stack size 16 bytes, sys_lcd.o(i.LCD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_IO_Init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LCD_Init
</UL>

<P><STRONG><a name="[3b]"></a>Open_Dev_Clock</STRONG> (ARM, 124 bytes, Stack size 24 bytes, sys_clock.o(i.Open_Dev_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Open_Dev_Clock &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_clk_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Init
</UL>

<P><STRONG><a name="[2a]"></a>SWI_Handler2</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_interrupt.o(i.SWI_Handler2))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler2
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>

<P><STRONG><a name="[5f]"></a>Set_LayerX_window</STRONG> (ARM, 136 bytes, Stack size 4 bytes, sys_lcd.o(i.Set_LayerX_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Set_LayerX_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_video_window
</UL>

<P><STRONG><a name="[5c]"></a>Set_Layer_format</STRONG> (ARM, 40 bytes, Stack size 0 bytes, sys_lcd.o(i.Set_Layer_format))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>Sys_Clock_Init</STRONG> (ARM, 340 bytes, Stack size 16 bytes, sys_clock.o(i.Sys_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Sys_Clock_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>Sys_LCD_Init</STRONG> (ARM, 92 bytes, Stack size 24 bytes, sys_lcd.o(i.Sys_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Sys_LCD_Init &rArr; F1C100S_LCD_Config &rArr; Tcon_Init &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1C100S_LCD_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>Sys_TimerX_Init</STRONG> (ARM, 84 bytes, Stack size 16 bytes, sys_timer.o(i.Sys_TimerX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sys_TimerX_Init &rArr; IRQ_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>Sys_Uart_Put</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sys_uart.o(i.Sys_Uart_Put))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[f]"></a>TIMER1_ISR</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sys_timer.o(i.TIMER1_ISR))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3d]"></a>Tcon_Init</STRONG> (ARM, 576 bytes, Stack size 40 bytes, sys_lcd.o(i.Tcon_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Tcon_Init &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F1C100S_LCD_Config
</UL>

<P><STRONG><a name="[48]"></a>Timer_Init</STRONG> (ARM, 100 bytes, Stack size 0 bytes, sys_timer.o(i.Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TimerX_Init
</UL>

<P><STRONG><a name="[17]"></a>__user_setup_stackheap</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(i.__user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1f]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, standalone.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4b]"></a>arm32_dcache_disable</STRONG> (ARM, 24 bytes, Stack size 4 bytes, arm32.o(i.arm32_dcache_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm32_dcache_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_write_p15_c1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[4e]"></a>arm32_dcache_enable</STRONG> (ARM, 24 bytes, Stack size 4 bytes, arm32.o(i.arm32_dcache_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm32_dcache_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_write_p15_c1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[64]"></a>arm32_domain_set</STRONG> (ARM, 8 bytes, Stack size 0 bytes, arm32.o(i.arm32_domain_set))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[4f]"></a>arm32_icache_disable</STRONG> (ARM, 24 bytes, Stack size 4 bytes, arm32.o(i.arm32_icache_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm32_icache_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_write_p15_c1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[50]"></a>arm32_icache_enable</STRONG> (ARM, 24 bytes, Stack size 4 bytes, arm32.o(i.arm32_icache_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm32_icache_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_write_p15_c1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[51]"></a>arm32_mmu_disable</STRONG> (ARM, 24 bytes, Stack size 4 bytes, arm32.o(i.arm32_mmu_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm32_mmu_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_write_p15_c1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[52]"></a>arm32_mmu_enable</STRONG> (ARM, 24 bytes, Stack size 4 bytes, arm32.o(i.arm32_mmu_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm32_mmu_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_write_p15_c1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[4c]"></a>arm32_read_p15_c1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, arm32.o(i.arm32_read_p15_c1))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_mmu_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_mmu_disable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_icache_enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_icache_disable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_dcache_enable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_dcache_disable
</UL>

<P><STRONG><a name="[63]"></a>arm32_tlb_invalidate</STRONG> (ARM, 20 bytes, Stack size 0 bytes, arm32.o(i.arm32_tlb_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[62]"></a>arm32_ttb_set</STRONG> (ARM, 8 bytes, Stack size 0 bytes, arm32.o(i.arm32_ttb_set))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[4d]"></a>arm32_write_p15_c1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, arm32.o(i.arm32_write_p15_c1))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_mmu_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_mmu_disable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_icache_enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_icache_disable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_dcache_enable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_dcache_disable
</UL>

<P><STRONG><a name="[2e]"></a>delay_ms</STRONG> (ARM, 56 bytes, Stack size 8 bytes, sys_delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVS_Time_Start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVS_Time_Read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVS_Time_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcon_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debe_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_clk_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TVD_config
</UL>

<P><STRONG><a name="[44]"></a>delay_us</STRONG> (ARM, 56 bytes, Stack size 8 bytes, sys_delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVS_Time_Start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVS_Time_Read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVS_Time_Init_x
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Dev_Clock
</UL>

<P><STRONG><a name="[57]"></a>f1c100s_clk_init</STRONG> (ARM, 124 bytes, Stack size 8 bytes, sys_tvd.o(i.f1c100s_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = f1c100s_clk_init &rArr; Open_Dev_Clock &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Dev_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_init
</UL>

<P><STRONG><a name="[58]"></a>f1c100s_tvd_Init</STRONG> (ARM, 84 bytes, Stack size 16 bytes, sys_tvd.o(i.f1c100s_tvd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = f1c100s_tvd_Init &rArr; Defe_Config &rArr; Defe_Config_video_uvcombined_yuv422_to_argb_x &rArr; DE_SCAL_Set_Scaling_Coef &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Defe_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>f1c100s_tvd_init</STRONG> (ARM, 148 bytes, Stack size 16 bytes, sys_tvd.o(i.f1c100s_tvd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = f1c100s_tvd_init &rArr; BSP_TVD_config &rArr; sysprintf &rArr; FormatItem &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_clk_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TVD_config
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_Init
</UL>

<P><STRONG><a name="[5]"></a>main</STRONG> (ARM, 112 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = main &rArr; f1c100s_tvd_Init &rArr; Defe_Config &rArr; Defe_Config_video_uvcombined_yuv422_to_argb_x &rArr; DE_SCAL_Set_Scaling_Coef &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_video_window
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TimerX_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LCD_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clock_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Layer_format
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Layer_Video
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[5d]"></a>set_video_window</STRONG> (ARM, 36 bytes, Stack size 8 bytes, sys_lcd.o(i.set_video_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_video_window &rArr; Set_LayerX_window
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LayerX_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>sysFlushCache</STRONG> (ARM, 72 bytes, Stack size 8 bytes, sys_cache.o(i.sysFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[4a]"></a>sysSetLocalInterrupt</STRONG> (ARM, 96 bytes, Stack size 0 bytes, sys_interrupt.o(i.sysSetLocalInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TimerX_Init
</UL>

<P><STRONG><a name="[5b]"></a>sys_mmu_init</STRONG> (ARM, 260 bytes, Stack size 32 bytes, sys_mmu.o(i.sys_mmu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = sys_mmu_init &rArr; map_l1_section
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_ttb_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_tlb_invalidate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_mmu_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_mmu_disable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_icache_enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_icache_disable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_domain_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_dcache_enable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm32_dcache_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_l1_section
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>sysprintf</STRONG> (ARM, 144 bytes, Stack size 32 bytes, sys_uart.o(i.sysprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Uart_Put
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1c100s_tvd_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TVD_config
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[8]"></a>SWI_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[9]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[a]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[b]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[c]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[3e]"></a>FormatItem</STRONG> (ARM, 948 bytes, Stack size 80 bytes, sys_uart.o(i.FormatItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Uart_Put
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[e]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_interrupt.o(i.IRQ_Init))
<BR>[Address Reference Count : 1]<UL><LI> sys_interrupt.o(i.IRQ_Init)
</UL>
<P><STRONG><a name="[61]"></a>map_l1_section</STRONG> (ARM, 140 bytes, Stack size 36 bytes, sys_mmu.o(i.map_l1_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = map_l1_section
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mmu_init
</UL>

<P><STRONG><a name="[d]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_tvd.o(i.BSP_TVD_config))
<BR>[Address Reference Count : 1]<UL><LI> sys_tvd.o(i.BSP_TVD_config)
</UL>
<P><STRONG><a name="[28]"></a>__arm_div_large_positive</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[27]"></a>__arm_div16</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[26]"></a>__arm_div12</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[25]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[23]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
